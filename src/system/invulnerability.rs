use crate::component::{Invulnerable, InvulnerableFinished};

use amethyst::{
	derive::SystemDesc,
	ecs::{Entity, Entities, Join, System, SystemData, WriteStorage},
	renderer::resources::Tint,
};

/// Tracks when invulnerability has expired and removes it.
#[derive(SystemDesc)]
pub struct Invulnerability;

impl<'a> System<'a> for Invulnerability {
	type SystemData = (
		Entities<'a>,
		WriteStorage<'a, Invulnerable>,
		WriteStorage<'a, Tint>,
	);

	fn run(&mut self, (entities, mut sto_invulnerable, mut sto_tint): Self::SystemData) {
		let mut entities_finished_invulnerable: Vec<Entity> = Vec::new();
		for (id, invulnerable) in (&entities, &mut sto_invulnerable).join() {
			if let InvulnerableFinished::Yes = invulnerable.update(id, &mut sto_tint) {
				entities_finished_invulnerable.push(id);
			}
		}
		for id in entities_finished_invulnerable {
			sto_invulnerable.remove(id);
		}
	}
}
